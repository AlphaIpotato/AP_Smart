#include <Adafruit_Sensor.h>
#include <DHT.h>
#include <DHT_U.h>
#include <WiFiNINA.h>

#define DHTPIN 2
#define DHTTYPE DHT22

const char* ssid = "aiwd0113";
const char* password = "xlms2073";
const char* serverAddress = "192.168.62.248";  // 웹 서버 주소
const int serverPort = 80;  // 웹 서버 포트

DHT_Unified dht(DHTPIN, DHTTYPE);

void setup() {
  Serial.begin(9600);
  while (!Serial) {
    ;
  }

  dht.begin();

  Serial.print("Connecting to WiFi");
  while (WiFi.begin(ssid, password) != WL_CONNECTED) {
    delay(1000);
    Serial.print(".");
  }

  Serial.println("\nConnected to WiFi");
}

void loop() {
  delay(300000);

  sensors_event_t event;

  float temperature = 0.0;
  float humidity = 0.0;

  dht.temperature().getEvent(&event);
  if (!isnan(event.temperature)) {
    temperature = event.temperature;
    Serial.print("Temp: ");
    Serial.print(temperature);
    Serial.println(" °C");
  } else {
    Serial.println("Error reading temperature!");
  }

  dht.humidity().getEvent(&event);
  if (!isnan(event.relative_humidity)) {
    humidity = event.relative_humidity;
    Serial.print("Humi: ");
    Serial.print(humidity);
    Serial.println("%");
  } else {
    Serial.println("Error reading humidity!");
  }

  // 데이터를 웹 서버로 전송
  sendToServer(temperature, humidity);
}

void sendToServer(float temperature, float humidity) {
  WiFiClient client;

  if (client.connect(serverAddress, serverPort)) {
    // HTTP POST 요청을 만듭니다.
    String path = "/index.php"; // Fixed path
    String postData = "&temperature=" + String(temperature, 2) + "&humidity=" + String(humidity, 2);
    client.print("POST " + path + " HTTP/1.1\r\n");
    client.print("Host: ");
    client.print(serverAddress);
    client.print("\r\n");
    client.print("Content-Type: application/x-www-form-urlencoded\r\n");
    client.print("Content-Length: ");
    client.print(postData.length());
    client.print("\r\n\r\n");
    client.print(postData);

    Serial.println("데이터 서버로 전송됨");

    // 응답을 받습니다.
    while (client.connected() && !client.available()) delay(1);
    while (client.available()) {
      char c = client.read();
      Serial.print(c);
    }
  } else {
    Serial.println("서버에 연결할 수 없음");
  }

  // 연결을 닫습니다.
  client.stop();
}
